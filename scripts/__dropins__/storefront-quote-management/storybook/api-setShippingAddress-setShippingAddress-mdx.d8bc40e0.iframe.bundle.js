"use strict";(self.webpackChunk_dropins_storefront_quote_management=self.webpackChunk_dropins_storefront_quote_management||[]).push([[3745],{"./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/preact/compat/dist/compat.module.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.default.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.default.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.default.useMemo(function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}},[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.default.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./src/api/setShippingAddress/setShippingAddress.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/preact/compat/dist/compat.module.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/preact/compat/jsx-runtime.mjs"),_Users_oeur_Desktop_Projects_public_storefront_quote_management_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");function _createMdxContent(props){const _components={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,_Users_oeur_Desktop_Projects_public_storefront_quote_management_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_2__.R)(),...props.components};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FK,{children:["\n","\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_3__.W8,{title:"API/setShippingAddress"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h1,{id:"setshippingaddress",children:"setShippingAddress"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.p,{children:"A function that sets or updates the shipping address for a negotiable quote. It supports setting the address using either a saved customer address ID or by providing new address data. Returns the updated quote data on success and emits an event for successful updates."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"import {\n  setShippingAddress,\n  SetShippingAddressInput,\n  AddressInput,\n} from '@/quote-management/api/setShippingAddress';\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h2,{id:"interface",children:"Interface"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"interface SetShippingAddressInput {\n  quoteUid: string; // Required: The unique ID of the negotiable quote\n  addressId?: number; // Optional: The ID of a saved customer address\n  addressData?: AddressInput; // Optional: New address data\n}\n\ninterface AddressInput {\n  city: string; // Required: City name\n  company?: string; // Optional: Company name\n  countryCode: string; // Required: Two-letter country code (e.g., 'US')\n  firstname: string; // Required: First name\n  lastname: string; // Required: Last name\n  postcode: string; // Required: Postal/ZIP code\n  region?: string; // Optional: State/province name\n  regionId?: number; // Optional: State/province ID\n  saveInAddressBook?: boolean; // Optional: Save to customer's address book\n  street: string[]; // Required: Street address lines (array)\n  telephone: string; // Required: Phone number\n  additionalInput?: Record<string, any>; // Optional: Additional custom address fields\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h2,{id:"usage",children:"Usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h3,{id:"using-a-saved-address-id",children:"Using a Saved Address ID"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.p,{children:"Set the shipping address using an existing customer address:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"const updatedQuote = await setShippingAddress({\n  quoteUid: 'quote-uid-123',\n  addressId: 5,\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h3,{id:"using-new-address-data",children:"Using New Address Data"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.p,{children:"Set the shipping address by providing complete address information:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"const updatedQuote = await setShippingAddress({\n  quoteUid: 'quote-uid-123',\n  addressData: {\n    firstname: 'John',\n    lastname: 'Doe',\n    street: ['123 Main St', 'Apt 4'],\n    city: 'San Francisco',\n    region: 'California',\n    postcode: '94103',\n    countryCode: 'US',\n    telephone: '555-1234',\n  },\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h3,{id:"with-optional-fields",children:"With Optional Fields"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.p,{children:"Include optional fields like company name and save to address book:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"const updatedQuote = await setShippingAddress({\n  quoteUid: 'quote-uid-123',\n  addressData: {\n    firstname: 'Jane',\n    lastname: 'Smith',\n    company: 'Adobe Inc.',\n    street: ['456 Oak Avenue', 'Suite 200'],\n    city: 'Los Angeles',\n    region: 'California',\n    regionId: 12,\n    postcode: '90001',\n    countryCode: 'US',\n    telephone: '555-5678',\n    saveInAddressBook: true,\n  },\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h3,{id:"with-additional-custom-fields",children:"With Additional Custom Fields"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.p,{children:["Use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{children:"additionalInput"})," to pass custom address fields that are not part of the standard address interface. This is useful for merchant-specific extensions or regional requirements:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"const updatedQuote = await setShippingAddress({\n  quoteUid: 'quote-uid-123',\n  addressData: {\n    firstname: 'John',\n    lastname: 'Doe',\n    street: ['123 Main St'],\n    city: 'San Francisco',\n    postcode: '94103',\n    countryCode: 'US',\n    telephone: '555-1234',\n    additionalInput: {\n      vat_id: 'GB123456789',\n      delivery_instructions: 'Leave at door',\n      custom_attribute: 'value',\n    },\n  },\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.strong,{children:"Important Notes about Additional Fields:"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.li,{children:"Additional fields are merged into the GraphQL mutation payload"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.li,{children:"Standard fields always take precedence over additional fields (defensive flexibility)"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.li,{children:"No automatic transformation is applied to additional field keys"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.li,{children:"The GraphQL backend validates all fields, including additional ones"}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h2,{id:"return-value",children:"Return Value"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.p,{children:["The function returns a Promise that resolves to a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{children:"NegotiableQuoteModel"})," object containing the updated quote data with the new shipping address, or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{children:"null"})," if the operation fails."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"interface NegotiableQuoteModel {\n  uid: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  status: NegotiableQuoteStatus;\n  shippingAddresses?: ShippingAddress[];\n  // ... other quote fields\n}\n\ninterface ShippingAddress {\n  /**\n   * The unique string identifier of the address\n   */\n  uid?: string;\n  firstname: string;\n  lastname: string;\n  company?: string;\n  street: string[];\n  city: string;\n  region?: {\n    code: string;\n    label: string;\n    regionId: number;\n  };\n  postcode: string;\n  country: {\n    code: string;\n    label: string;\n  };\n  telephone: string;\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h2,{id:"events",children:"Events"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.p,{children:"On successful address update, the function emits an event:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"events.emit('quote-management/shipping-address-set', {\n  quote: NegotiableQuoteModel,\n  input: SetShippingAddressInput,\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.p,{children:"You can listen for this event in your application:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"import { events } from '@adobe-commerce/event-bus';\n\nevents.on('quote-management/shipping-address-set', (data) => {\n  console.log('Shipping address updated:', data.quote);\n  console.log('Input used:', data.input);\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.p,{children:"The function validates inputs and throws errors in the following cases:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h3,{id:"validation-errors",children:"Validation Errors"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"// Missing quote UID\nawait setShippingAddress({ quoteUid: '' });\n// Error: Quote UID is required\n\n// Neither addressId nor addressData provided\nawait setShippingAddress({ quoteUid: 'quote-123' });\n// Error: Either addressId or addressData must be provided\n\n// Both addressId and addressData provided\nawait setShippingAddress({\n  quoteUid: 'quote-123',\n  addressId: 5,\n  addressData: { /* ... */ },\n});\n// Error: Cannot provide both addressId and addressData\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h3,{id:"graphql-errors",children:"GraphQL Errors"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"try {\n  await setShippingAddress({\n    quoteUid: 'invalid-quote-id',\n    addressId: 999,\n  });\n} catch (error) {\n  // Error: Failed to set shipping address: [GraphQL error message]\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.ol,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.li,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.strong,{children:"Use Saved Addresses When Available"}),": If the customer has saved addresses, use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{children:"addressId"})," for a better user experience."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.li,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.strong,{children:"Validate Address Data"}),": Ensure all required fields are provided when using ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{children:"addressData"}),"."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.li,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.strong,{children:"Use Additional Fields Wisely"}),": When using ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{children:"additionalInput"}),":"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.li,{children:["Pass fields in the exact format expected by your GraphQL backend (e.g., ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{children:"vat_id"})," not ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{children:"vatId"}),")"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.li,{children:"Avoid using field names that conflict with standard fields (they will be silently ignored)"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.li,{children:"Ensure your backend schema supports the custom fields you're sending"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.li,{children:"Use for merchant-specific extensions like VAT IDs, delivery instructions, or custom attributes"}),"\n"]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.li,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.strong,{children:"Handle Errors Gracefully"}),": Wrap calls in try-catch blocks to handle potential errors:"]}),"\n"]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"try {\n  const updatedQuote = await setShippingAddress({\n    quoteUid: quoteId,\n    addressId: selectedAddressId,\n  });\n  \n  console.log('Address updated successfully');\n} catch (error) {\n  console.error('Failed to update address:', error.message);\n  // Show error message to user\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.ol,{start:"5",children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.strong,{children:"Check for Shipping Address in Response"}),": After setting the address, verify it's included in the quote:"]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"const updatedQuote = await setShippingAddress({ /* ... */ });\n\nif (updatedQuote?.shippingAddresses?.length > 0) {\n  const address = updatedQuote.shippingAddresses[0];\n  console.log('Shipping address set:', address);\n  console.log('Address UID:', address.uid);\n} else {\n  console.warn('No shipping address in response');\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h2,{id:"integration-example",children:"Integration Example"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.p,{children:"Complete example integrating address selection with the API:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.code,{className:"language-ts",children:"import { setShippingAddress } from '@/quote-management/api';\n\n// Example: Using address selection from Account Drop-in\nasync function handleAddressSelection(quoteUid: string, selectedAddress: any) {\n  try {\n    let updatedQuote;\n    \n    if (selectedAddress.id) {\n      // Use existing address\n      updatedQuote = await setShippingAddress({\n        quoteUid,\n        addressId: selectedAddress.id,\n      });\n    } else {\n      // Use new address\n      updatedQuote = await setShippingAddress({\n        quoteUid,\n        addressData: {\n          firstname: selectedAddress.firstname,\n          lastname: selectedAddress.lastname,\n          street: selectedAddress.street,\n          city: selectedAddress.city,\n          region: selectedAddress.region,\n          postcode: selectedAddress.postcode,\n          countryCode: selectedAddress.countryCode,\n          telephone: selectedAddress.telephone,\n          company: selectedAddress.company,\n          saveInAddressBook: true,\n        },\n      });\n    }\n    \n    return updatedQuote;\n  } catch (error) {\n    throw new Error(`Failed to set shipping address: ${error.message}`);\n  }\n}\n\n// Example: Working with address identifier\nfunction logAddressInfo(quote: NegotiableQuoteModel) {\n  if (quote.shippingAddresses?.length > 0) {\n    const address = quote.shippingAddresses[0];\n    console.log('Address Details:', {\n      uid: address.uid,\n      name: `${address.firstname} ${address.lastname}`,\n      city: address.city,\n      country: address.country.code\n    });\n  }\n}\n\n// Example: Using additional custom fields\nasync function setAddressWithVAT(quoteUid: string, address: any, vatId: string) {\n  const updatedQuote = await setShippingAddress({\n    quoteUid,\n    addressData: {\n      firstname: address.firstname,\n      lastname: address.lastname,\n      street: address.street,\n      city: address.city,\n      region: address.region,\n      postcode: address.postcode,\n      countryCode: address.countryCode,\n      telephone: address.telephone,\n      // Pass VAT ID as additional field\n      additionalInput: {\n        vat_id: vatId,\n        tax_exempt: true,\n      },\n    },\n  });\n  \n  return updatedQuote;\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.h2,{id:"see-also",children:"See Also"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.a,{href:"./getQuoteData",children:"getQuoteData"})," - Fetch quote details including shipping addresses"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.FD)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_components.a,{href:"./requestNegotiableQuote",children:"requestNegotiableQuote"})," - Create a new negotiable quote"]}),"\n"]})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,_Users_oeur_Desktop_Projects_public_storefront_quote_management_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_2__.R)(),...props.components};return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Y)(_createMdxContent,{...props})}):_createMdxContent(props)}}}]);